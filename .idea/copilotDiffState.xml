<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/base/BaseOfflineRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/base/BaseOfflineRepository.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.data.base&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.stringPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import com.example.e_zuka.utils.SecurityUtils&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;import java.io.File&#10;import java.util.zip.ZipEntry&#10;import java.util.zip.ZipInputStream&#10;import java.util.zip.ZipOutputStream&#10;&#10;abstract class BaseOfflineRepository(private val context: Context) {&#10;    private val Context.dataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;offline_data&quot;)&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;&#10;    protected suspend inline fun &lt;reified T&gt; saveOfflineData(key: String, data: T) {&#10;        val jsonString = json.encodeToString(data)&#10;        val encryptedData = SecurityUtils.encryptData(&quot;offline_key&quot;, jsonString)&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[stringPreferencesKey(key)] = encryptedData&#10;        }&#10;    }&#10;&#10;    protected suspend inline fun &lt;reified T&gt; getOfflineData(key: String): T? {&#10;        return try {&#10;            val encryptedData = context.dataStore.data.map { preferences -&gt;&#10;                preferences[stringPreferencesKey(key)]&#10;            }.first()&#10;&#10;            encryptedData?.let {&#10;                val jsonString = SecurityUtils.decryptData(&quot;offline_key&quot;, it)&#10;                json.decodeFromString&lt;T&gt;(jsonString)&#10;            }&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    // データのバックアップを作成&#10;    suspend fun createBackup(outputFile: File) {&#10;        ZipOutputStream(outputFile.outputStream()).use { zipOut -&gt;&#10;            // DataStoreのデータをバックアップ&#10;            val preferencesData = context.dataStore.data.first()&#10;            val preferencesJson = json.encodeToString(preferencesData.asMap())&#10;            zipOut.putNextEntry(ZipEntry(&quot;preferences.json&quot;))&#10;            zipOut.write(preferencesJson.toByteArray())&#10;            zipOut.closeEntry()&#10;&#10;            // その他のアプリデータをバックアップ&#10;            context.filesDir.walk().forEach { file -&gt;&#10;                if (file.isFile) {&#10;                    val relativePath = file.relativeTo(context.filesDir).path&#10;                    zipOut.putNextEntry(ZipEntry(relativePath))&#10;                    file.inputStream().use { input -&gt;&#10;                        input.copyTo(zipOut)&#10;                    }&#10;                    zipOut.closeEntry()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // バックアップからデータを復元&#10;    suspend fun restoreFromBackup(backupFile: File) {&#10;        ZipInputStream(backupFile.inputStream()).use { zipIn -&gt;&#10;            var entry = zipIn.nextEntry&#10;            while (entry != null) {&#10;                when (entry.name) {&#10;                    &quot;preferences.json&quot; -&gt; {&#10;                        // DataStoreのデータを復元&#10;                        val preferencesJson = zipIn.reader().readText()&#10;                        val preferencesMap = json.decodeFromString&lt;Map&lt;String, String&gt;&gt;(preferencesJson)&#10;                        context.dataStore.edit { preferences -&gt;&#10;                            preferences.clear()&#10;                            preferencesMap.forEach { (key, value) -&gt;&#10;                                preferences[stringPreferencesKey(key)] = value&#10;                            }&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        // その他のファイルを復元&#10;                        val targetFile = File(context.filesDir, entry.name)&#10;                        targetFile.parentFile?.mkdirs()&#10;                        targetFile.outputStream().use { output -&gt;&#10;                            zipIn.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;                entry = zipIn.nextEntry&#10;            }&#10;        }&#10;    }&#10;&#10;    // オフラインデータの有効期限をチェック&#10;    protected fun isOfflineDataValid(lastSyncTime: Long, maxAgeMinutes: Long): Boolean {&#10;        val currentTime = System.currentTimeMillis()&#10;        return (currentTime - lastSyncTime) &lt;= maxAgeMinutes * 60 * 1000&#10;    }&#10;&#10;    // キャッシュされたデータを削除&#10;    protected suspend fun clearOfflineData(key: String) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences.remove(stringPreferencesKey(key))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/model/HelpRequestData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/model/HelpRequestData.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.data.model&#10;&#10;import com.google.firebase.Timestamp&#10;&#10;// 困りごと投稿データ&#10;data class HelpRequestData(&#10;    val requestId: String = &quot;&quot;,&#10;    val userId: String = &quot;&quot;,&#10;    val userDisplayName: String = &quot;&quot;,&#10;    val regionCodeId: String = &quot;&quot;,&#10;    val title: String = &quot;&quot;,&#10;    val description: String = &quot;&quot;,&#10;    val createdAt: Timestamp = Timestamp.now(),&#10;    val matchedHelperId: String? = null, // 助けるユーザーID&#10;    val matchedHelperName: String? = null, // 助けるユーザー名&#10;    val status: String = &quot;open&quot; // open, matched, closed&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/region/HelpMatchingRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/data/region/HelpMatchingRepository.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.data.region&#10;&#10;import android.util.Log&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.data.model.HelpEvaluation&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HelpMatchingRepository {&#10;    private val firestore = FirebaseFirestore.getInstance()&#10;    companion object {&#10;        private const val TAG = &quot;HelpMatchingRepository&quot;&#10;        private const val REQUESTS = &quot;requests&quot;&#10;        private const val SKILLS = &quot;skills&quot;&#10;        private const val EVALUATIONS = &quot;evaluations&quot;&#10;    }&#10;&#10;    // 困りごと投稿&#10;    suspend fun postHelpRequest(request: HelpRequest): Boolean {&#10;        return try {&#10;            val docRef = firestore.collection(REQUESTS).document()&#10;            val newRequest = request.copy(requestId = docRef.id, createdAt = Timestamp.now(), updatedAt = Timestamp.now())&#10;            docRef.set(newRequest).await()&#10;            true&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to post help request&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    // 困りごと一覧取得&#10;    suspend fun getHelpRequests(): List&lt;HelpRequest&gt; {&#10;        return try {&#10;            val snapshot = firestore.collection(REQUESTS)&#10;                .orderBy(&quot;createdAt&quot;, com.google.firebase.firestore.Query.Direction.DESCENDING)&#10;                .get().await()&#10;            snapshot.documents.mapNotNull { it.toObject(HelpRequest::class.java) }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to get help requests&quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    // スキル登録&#10;    suspend fun registerSkill(skill: HelperSkill): Boolean {&#10;        return try {&#10;            val docRef = firestore.collection(SKILLS).document()&#10;            val newSkill = skill.copy(skillId = docRef.id, createdAt = Timestamp.now())&#10;            docRef.set(newSkill).await()&#10;            true&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to register skill&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    // スキル一覧取得&#10;    suspend fun getSkills(): List&lt;HelperSkill&gt; {&#10;        return try {&#10;            val snapshot = firestore.collection(SKILLS)&#10;                .orderBy(&quot;createdAt&quot;, com.google.firebase.firestore.Query.Direction.DESCENDING)&#10;                .get().await()&#10;            snapshot.documents.mapNotNull { it.toObject(HelperSkill::class.java) }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to get skills&quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    // マッチング（困りごととスキルの検索）&#10;    suspend fun findMatchingHelpers(request: HelpRequest): List&lt;HelperSkill&gt; {&#10;        return try {&#10;            val skillsSnapshot = firestore.collection(SKILLS)&#10;                .whereEqualTo(&quot;skillName&quot;, request.category)&#10;                .get().await()&#10;            skillsSnapshot.documents.mapNotNull { it.toObject(HelperSkill::class.java) }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to find matching helpers&quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    // 進捗更新&#10;    suspend fun updateRequestStatus(requestId: String, status: String, matchedHelperId: String? = null): Boolean {&#10;        return try {&#10;            val updateMap = mutableMapOf&lt;String, Any&gt;(&quot;status&quot; to status, &quot;updatedAt&quot; to Timestamp.now())&#10;            if (matchedHelperId != null) updateMap[&quot;matchedHelperId&quot;] = matchedHelperId&#10;            firestore.collection(REQUESTS).document(requestId).update(updateMap).await()&#10;            true&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to update request status&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    // 評価投稿&#10;    suspend fun postEvaluation(evaluation: HelpEvaluation): Boolean {&#10;        return try {&#10;            val docRef = firestore.collection(EVALUATIONS).document()&#10;            val newEval = evaluation.copy(evaluationId = docRef.id, createdAt = Timestamp.now())&#10;            docRef.set(newEval).await()&#10;            true&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to post evaluation&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    // 評価一覧取得&#10;    suspend fun getEvaluationsForUser(userId: String): List&lt;HelpEvaluation&gt; {&#10;        return try {&#10;            val snapshot = firestore.collection(EVALUATIONS)&#10;                .whereEqualTo(&quot;targetUserId&quot;, userId)&#10;                .get().await()&#10;            snapshot.documents.mapNotNull { it.toObject(HelpEvaluation::class.java) }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to get evaluations&quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpEvaluationListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpEvaluationListScreen.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpEvaluation&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;import com.google.firebase.auth.FirebaseUser&#10;&#10;@Composable&#10;fun HelpEvaluationListScreen(&#10;    user: FirebaseUser,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val evaluations by viewModel.evaluations.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadEvaluationsForUser(user.uid)&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&quot;受けた評価一覧&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (isLoading) {&#10;            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        } else if (evaluations.isEmpty()) {&#10;            Text(&quot;まだ評価はありません。&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;        } else {&#10;            LazyColumn {&#10;                items(evaluations) { eval -&gt;&#10;                    HelpEvaluationCard(eval)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpEvaluationCard(evaluation: HelpEvaluation) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;評価: ${evaluation.rating}点&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;コメント: ${evaluation.comment}&quot;)&#10;            Text(&quot;依頼ID: ${evaluation.requestId}&quot;)&#10;            Text(&quot;評価者ID: ${evaluation.evaluatorId}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpEvaluationScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpEvaluationScreen.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpEvaluation&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;import com.google.firebase.auth.FirebaseUser&#10;&#10;@Composable&#10;fun HelpEvaluationScreen(&#10;    requestId: String,&#10;    targetUserId: String,&#10;    evaluator: FirebaseUser,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var rating by remember { mutableStateOf(5) }&#10;    var comment by remember { mutableStateOf(&quot;&quot;) }&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val successMessage by viewModel.successMessage.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;支援者評価&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&quot;星評価（1〜5）&quot;, style = MaterialTheme.typography.bodyLarge)&#10;        Row {&#10;            (1..5).forEach { star -&gt;&#10;                IconButton(onClick = { rating = star }) {&#10;                    Icon(&#10;                        imageVector = if (star &lt;= rating) Icons.Default.Star else Icons.Default.StarBorder,&#10;                        contentDescription = null,&#10;                        tint = if (star &lt;= rating) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        OutlinedTextField(&#10;            value = comment,&#10;            onValueChange = { comment = it },&#10;            label = { Text(&quot;コメント&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 3&#10;        )&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = {&#10;                val evaluation = HelpEvaluation(&#10;                    requestId = requestId,&#10;                    evaluatorId = evaluator.uid,&#10;                    targetUserId = targetUserId,&#10;                    rating = rating,&#10;                    comment = comment&#10;                )&#10;                viewModel.postEvaluation(evaluation)&#10;            },&#10;            enabled = !isLoading &amp;&amp; comment.isNotBlank()&#10;        ) {&#10;            Text(&quot;評価を送信&quot;)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (successMessage != null) {&#10;            Text(successMessage!!, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;        if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestDetailScreen.kt" />
              <option name="originalContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;&#10;@Composable&#10;fun HelpRequestDetailScreen(&#10;    request: HelpRequest,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val matchedHelpers by viewModel.matchedHelpers.collectAsState()&#10;    val successMessage by viewModel.successMessage.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;困りごと詳細&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        HelpRequestCard(request)&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { viewModel.findMatchingHelpers(request) },&#10;            enabled = !isLoading&#10;        ) {&#10;            Text(&quot;マッチング検索&quot;)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator()&#10;        }&#10;&#10;        if (successMessage != null) {&#10;            Text(successMessage!!, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;        if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        }&#10;&#10;        if (matchedHelpers.isNotEmpty()) {&#10;            Text(&quot;マッチした支援者一覧&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LazyColumn {&#10;                items(matchedHelpers) { helper -&gt;&#10;                    HelperSkillCard(helper)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpRequestCard(request: HelpRequest) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;カテゴリ: ${request.category}&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;詳細: ${request.detail}&quot;)&#10;            Text(&quot;場所: ${request.location}&quot;)&#10;            Text(&quot;希望日時: ${request.dateTime.toDate()}&quot;)&#10;            Text(&quot;報酬区分: ${request.rewardType}&quot;)&#10;            Text(&quot;進捗: ${request.status}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelperSkillCard(helper: HelperSkill) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;スキル名: ${helper.skillName}&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;説明: ${helper.description}&quot;)&#10;            Text(&quot;支援者ID: ${helper.userId}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;&#10;@Composable&#10;fun HelpRequestDetailScreen(&#10;    request: HelpRequest,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val matchedHelpers by viewModel.matchedHelpers.collectAsState()&#10;    val successMessage by viewModel.successMessage.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;困りごと詳細&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        HelpRequestCard(request)&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { viewModel.findMatchingHelpers(request) },&#10;            enabled = !isLoading&#10;        ) {&#10;            Text(&quot;マッチング検索&quot;)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator()&#10;        }&#10;&#10;        if (successMessage != null) {&#10;            Text(successMessage!!, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;        if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        }&#10;&#10;        if (matchedHelpers.isNotEmpty()) {&#10;            Text(&quot;マッチした支援者一覧&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LazyColumn {&#10;                items(matchedHelpers) { helper -&gt;&#10;                    HelperSkillCard(helper)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;&#10;        // 進捗管理（状態変更・支援者決定）&#10;        if (matchedHelpers.isNotEmpty() &amp;&amp; request.status == &quot;募集&quot;) {&#10;            Text(&quot;支援者を選択してマッチングを成立させてください&quot;, color = MaterialTheme.colorScheme.primary)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            matchedHelpers.forEach { helper -&gt;&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.updateRequestStatus(request.requestId, &quot;マッチング&quot;, helper.userId)&#10;                    },&#10;                    enabled = !isLoading,&#10;                    modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)&#10;                ) {&#10;                    Text(&quot;この支援者でマッチング成立: ${helper.skillName}&quot;)&#10;                }&#10;            }&#10;        }&#10;        if (request.status == &quot;マッチング&quot;) {&#10;            Button(&#10;                onClick = {&#10;                    viewModel.updateRequestStatus(request.requestId, &quot;作業中&quot;, request.matchedHelperId)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)&#10;            ) {&#10;                Text(&quot;作業開始&quot;)&#10;            }&#10;        }&#10;        if (request.status == &quot;作業中&quot;) {&#10;            Button(&#10;                onClick = {&#10;                    viewModel.updateRequestStatus(request.requestId, &quot;完了&quot;, request.matchedHelperId)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)&#10;            ) {&#10;                Text(&quot;作業完了&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpRequestCard(request: HelpRequest) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;カテゴリ: ${request.category}&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;詳細: ${request.detail}&quot;)&#10;            Text(&quot;場所: ${request.location}&quot;)&#10;            Text(&quot;希望日時: ${request.dateTime.toDate()}&quot;)&#10;            Text(&quot;報酬区分: ${request.rewardType}&quot;)&#10;            Text(&quot;進捗: ${request.status}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelperSkillCard(helper: HelperSkill) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;スキル名: ${helper.skillName}&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;説明: ${helper.description}&quot;)&#10;            Text(&quot;支援者ID: ${helper.userId}&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestListScreen.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;import com.google.firebase.auth.FirebaseUser&#10;&#10;@Composable&#10;fun HelpRequestListScreen(&#10;    user: FirebaseUser,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val helpRequests by viewModel.helpRequests.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadHelpRequests()&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&quot;困りごと一覧&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (isLoading) {&#10;            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        } else if (helpRequests.isEmpty()) {&#10;            Text(&quot;困りごとの投稿はありません。&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;        } else {&#10;            LazyColumn {&#10;                items(helpRequests) { request -&gt;&#10;                    HelpRequestCard(request)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpRequestCard(request: HelpRequest) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;カテゴリ: ${request.category}&quot;, fontWeight = FontWeight.Bold)&#10;            Text(&quot;詳細: ${request.detail}&quot;)&#10;            Text(&quot;場所: ${request.location}&quot;)&#10;            Text(&quot;希望日時: ${request.dateTime.toDate()}&quot;)&#10;            Text(&quot;報酬区分: ${request.rewardType}&quot;)&#10;            Text(&quot;進捗: ${request.status}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestPostScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/HelpRequestPostScreen.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;import com.example.e_zuka.ui.components.LoadingButton&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseUser&#10;&#10;@Composable&#10;fun HelpRequestPostScreen(&#10;    user: FirebaseUser,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var category by remember { mutableStateOf(&quot;&quot;) }&#10;    var detail by remember { mutableStateOf(&quot;&quot;) }&#10;    var location by remember { mutableStateOf(&quot;&quot;) }&#10;    var dateTime by remember { mutableStateOf(&quot;&quot;) }&#10;    var rewardType by remember { mutableStateOf(&quot;無償&quot;) }&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val successMessage by viewModel.successMessage.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;困りごと投稿&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        OutlinedTextField(&#10;            value = category,&#10;            onValueChange = { category = it },&#10;            label = { Text(&quot;カテゴリ (例: 家具移動)&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        OutlinedTextField(&#10;            value = detail,&#10;            onValueChange = { detail = it },&#10;            label = { Text(&quot;詳細&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 3&#10;        )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { location = it },&#10;            label = { Text(&quot;場所&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        OutlinedTextField(&#10;            value = dateTime,&#10;            onValueChange = { dateTime = it },&#10;            label = { Text(&quot;希望日時 (例: 2025/08/15 10:00)&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)&#10;        )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            Text(&quot;報酬区分:&quot;, modifier = Modifier.padding(end = 8.dp))&#10;            RadioButton(&#10;                selected = rewardType == &quot;無償&quot;,&#10;                onClick = { rewardType = &quot;無償&quot; }&#10;            )&#10;            Text(&quot;無償&quot;, modifier = Modifier.padding(end = 16.dp))&#10;            RadioButton(&#10;                selected = rewardType == &quot;報酬あり&quot;,&#10;                onClick = { rewardType = &quot;報酬あり&quot; }&#10;            )&#10;            Text(&quot;報酬あり&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        LoadingButton(&#10;            text = &quot;投稿する&quot;,&#10;            isLoading = isLoading,&#10;            onClick = {&#10;                val request = HelpRequest(&#10;                    category = category,&#10;                    detail = detail,&#10;                    location = location,&#10;                    dateTime = Timestamp.now(), // 本来はdateTimeをパース&#10;                    rewardType = rewardType,&#10;                    status = &quot;募集&quot;,&#10;                    requesterId = user.uid&#10;                )&#10;                viewModel.postHelpRequest(request)&#10;            },&#10;            enabled = category.isNotBlank() &amp;&amp; detail.isNotBlank() &amp;&amp; location.isNotBlank() &amp;&amp; dateTime.isNotBlank()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (successMessage != null) {&#10;            Text(successMessage!!, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;        if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/SkillRegisterScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/help/SkillRegisterScreen.kt" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.help&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.viewmodel.HelpMatchingViewModel&#10;import com.example.e_zuka.ui.components.LoadingButton&#10;import com.google.firebase.auth.FirebaseUser&#10;&#10;@Composable&#10;fun SkillRegisterScreen(&#10;    user: FirebaseUser,&#10;    viewModel: HelpMatchingViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var skillName by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val successMessage by viewModel.successMessage.collectAsState()&#10;    val errorMessage by viewModel.errorMessage.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;スキル登録&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        OutlinedTextField(&#10;            value = skillName,&#10;            onValueChange = { skillName = it },&#10;            label = { Text(&quot;スキル名 (例: ITサポート)&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        OutlinedTextField(&#10;            value = description,&#10;            onValueChange = { description = it },&#10;            label = { Text(&quot;説明&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            maxLines = 3&#10;        )&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        LoadingButton(&#10;            text = &quot;登録する&quot;,&#10;            isLoading = isLoading,&#10;            onClick = {&#10;                val skill = HelperSkill(&#10;                    userId = user.uid,&#10;                    skillName = skillName,&#10;                    description = description&#10;                )&#10;                viewModel.registerSkill(skill)&#10;            },&#10;            enabled = skillName.isNotBlank() &amp;&amp; description.isNotBlank()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (successMessage != null) {&#10;            Text(successMessage!!, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;        if (errorMessage != null) {&#10;            Text(errorMessage!!, color = MaterialTheme.colorScheme.error)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/threads/ThreadListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/ui/threads/ThreadListScreen.kt" />
              <option name="originalContent" value="package com.example.e_zuka.ui.threads&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.e_zuka.data.model.ProblemData&#10;import com.example.e_zuka.data.model.RegionAuthState&#10;import com.example.e_zuka.ui.chat.RegionChatScreen&#10;import com.example.e_zuka.viewmodel.AuthViewModel&#10;import com.example.e_zuka.viewmodel.ProblemViewModel&#10;import com.example.e_zuka.viewmodel.RegionChatViewModel&#10;import com.google.firebase.auth.FirebaseUser&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ThreadListScreen(&#10;    user: FirebaseUser,&#10;    authViewModel: AuthViewModel,&#10;    problemViewModel: ProblemViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val regionAuthState by authViewModel.regionAuthState.collectAsState()&#10;    val uiState by problemViewModel.uiState.collectAsState()&#10;    var selectedProblem by remember { mutableStateOf&lt;ProblemData?&gt;(null) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val chatViewModel: RegionChatViewModel = viewModel()&#10;&#10;    LaunchedEffect(regionAuthState) {&#10;        if (regionAuthState is RegionAuthState.Verified) {&#10;            val regionCodeId = (regionAuthState as RegionAuthState.Verified).regionData.codeId&#10;            problemViewModel.loadProblems(regionCodeId)&#10;        }&#10;    }&#10;&#10;    val filteredProblems = remember(uiState.problems, searchQuery) {&#10;        if (searchQuery.isBlank()) {&#10;            uiState.problems&#10;        } else {&#10;            uiState.problems.filter { problem -&gt;&#10;                problem.title.contains(searchQuery, ignoreCase = true) ||&#10;                problem.description.contains(searchQuery, ignoreCase = true)&#10;            }&#10;        }.sortedByDescending { it.createdAt }&#10;    }&#10;&#10;    Column(modifier = modifier.fillMaxSize()) {&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    &quot;スレッド一覧&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        )&#10;&#10;        // 検索バー&#10;        SearchBar(&#10;            query = searchQuery,&#10;            onQueryChange = { searchQuery = it },&#10;            onSearch = { },&#10;            active = false,&#10;            onActiveChange = { },&#10;            placeholder = { Text(&quot;スレッドを検索...&quot;) },&#10;            leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;検索&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            content = { }  // 空のcontent lambdaを追加&#10;        )&#10;&#10;        if (uiState.isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (filteredProblems.isEmpty()) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&quot;スレッドがありません&quot;)&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(filteredProblems) { problem -&gt;&#10;                    ThreadCard(&#10;                        problem = problem,&#10;                        onClick = { selectedProblem = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // 詳細画面ダイアログ&#10;    if (selectedProblem != null) {&#10;        Dialog(&#10;            onDismissRequest = { selectedProblem = null },&#10;            properties = DialogProperties(usePlatformDefaultWidth = false)&#10;        ) {&#10;            Surface(&#10;                modifier = Modifier.fillMaxSize(),&#10;                color = MaterialTheme.colorScheme.background&#10;            ) {&#10;                Column {&#10;                    TopAppBar(&#10;                        title = { Text(&quot;スレッドの詳細&quot;) },&#10;                        navigationIcon = {&#10;                            IconButton(onClick = { selectedProblem = null }) {&#10;                                Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;戻る&quot;)&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    // スレッドチャット画面&#10;                    RegionChatScreen(&#10;                        user = user,&#10;                        regionCodeId = selectedProblem!!.threadId, // threadIdをチャットIDとして使用&#10;                        viewModel = chatViewModel,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .weight(1f)&#10;                    )&#10;&#10;                    // アクションボタン&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        if (!selectedProblem!!.isSolved) {&#10;                            if (selectedProblem!!.helperUserId == null &amp;&amp; selectedProblem!!.userId != user.uid) {&#10;                                Button(&#10;                                    onClick = {&#10;                                        problemViewModel.helpProblem(selectedProblem!!.problemId, user.uid)&#10;                                        selectedProblem = null&#10;                                    },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Icon(Icons.Default.Handshake, contentDescription = null)&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&quot;助ける&quot;)&#10;                                }&#10;                            } else if (selectedProblem!!.helperUserId == user.uid) {&#10;                                Button(&#10;                                    onClick = {&#10;                                        problemViewModel.solveProblem(selectedProblem!!.problemId)&#10;                                        selectedProblem = null&#10;                                    },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Icon(Icons.Default.Done, contentDescription = null)&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&quot;解決済みにする&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // エラーメッセージのSnackbar表示&#10;    LaunchedEffect(uiState.errorMessage) {&#10;        uiState.errorMessage?.let {&#10;            // Snackbarの表示処理&#10;            problemViewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ThreadCard(&#10;    problem: ProblemData,&#10;    onClick: (ProblemData) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(problem) },&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    problem.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                if (problem.isSolved) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.secondaryContainer,&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            &quot;解決済み&quot;,&#10;                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                problem.description,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // ユーザー情報&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Person,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        problem.displayName,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // 日時&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Schedule,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        SimpleDateFormat(&quot;MM/dd HH:mm&quot;, Locale.getDefault())&#10;                            .format(problem.createdAt.toDate()),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // 助けている人の情報（存在する場合）&#10;            if (problem.helperUserId != null &amp;&amp; !problem.isSolved) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Handshake,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            &quot;${problem.helperDisplayName}さんが助けています&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.e_zuka.ui.threads&#13;&#10;&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.Message&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import com.example.e_zuka.data.model.NotificationType&#13;&#10;import com.example.e_zuka.data.model.UserNotification&#13;&#10;import com.example.e_zuka.viewmodel.NotificationsViewModel&#13;&#10;import com.google.firebase.auth.FirebaseUser&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.*&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun NotificationsScreen(&#13;&#10;    user: FirebaseUser,&#13;&#10;    notificationsViewModel: NotificationsViewModel,&#13;&#10;    onProblemClick: (String) -&gt; Unit,&#13;&#10;    onChatClick: (String) -&gt; Unit,&#13;&#10;    modifier: Modifier = Modifier&#13;&#10;) {&#13;&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    val notifications by notificationsViewModel.notifications.collectAsState()&#13;&#10;    val isLoading by notificationsViewModel.isLoading.collectAsState()&#13;&#10;    val snackbarHostState = remember { SnackbarHostState() }&#13;&#10;&#13;&#10;    // 通知のロード&#13;&#10;    LaunchedEffect(Unit) {&#13;&#10;        notificationsViewModel.loadNotifications(user.uid)&#13;&#10;    }&#13;&#10;&#13;&#10;    Column(modifier = modifier.fillMaxSize()) {&#13;&#10;        TopAppBar(&#13;&#10;            title = {&#13;&#10;                Text(&#13;&#10;                    &quot;通知&quot;,&#13;&#10;                    style = MaterialTheme.typography.titleLarge,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;            },&#13;&#10;            colors = TopAppBarDefaults.topAppBarColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.surface&#13;&#10;            )&#13;&#10;        )&#13;&#10;&#13;&#10;        // 検索バー&#13;&#10;        SearchBar(&#13;&#10;            query = searchQuery,&#13;&#10;            onQueryChange = { searchQuery = it },&#13;&#10;            onSearch = { },&#13;&#10;            active = false,&#13;&#10;            onActiveChange = { },&#13;&#10;            placeholder = { Text(&quot;通知を検索...&quot;) },&#13;&#10;            leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;検索&quot;) },&#13;&#10;            modifier = Modifier.fillMaxWidth(),&#13;&#10;            content = { }&#13;&#10;        )&#13;&#10;&#13;&#10;        if (isLoading) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier.fillMaxSize(),&#13;&#10;                contentAlignment = Alignment.Center&#13;&#10;            ) {&#13;&#10;                CircularProgressIndicator()&#13;&#10;            }&#13;&#10;        } else if (notifications.isEmpty()) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier.fillMaxSize(),&#13;&#10;                contentAlignment = Alignment.Center&#13;&#10;            ) {&#13;&#10;                Text(&quot;通知はありません&quot;)&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            LazyColumn(&#13;&#10;                modifier = Modifier.fillMaxSize(),&#13;&#10;                contentPadding = PaddingValues(16.dp),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;            ) {&#13;&#10;                items(&#13;&#10;                    items = notifications.filter { notification -&gt;&#13;&#10;                        notification.title.contains(searchQuery, ignoreCase = true) ||&#13;&#10;                        notification.message.contains(searchQuery, ignoreCase = true)&#13;&#10;                    }&#13;&#10;                ) { notification -&gt;&#13;&#10;                    NotificationCard(&#13;&#10;                        notification = notification,&#13;&#10;                        onClick = {&#13;&#10;                            when (notification.type) {&#13;&#10;                                NotificationType.PROBLEM -&gt; notification.referenceId?.let { onProblemClick(it) }&#13;&#10;                                NotificationType.CHAT -&gt; notification.referenceId?.let { onChatClick(it) }&#13;&#10;                                else -&gt; { /* その他の通知タイプの処理 */ }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Snackbar&#13;&#10;    SnackbarHost(&#13;&#10;        hostState = snackbarHostState,&#13;&#10;        modifier = Modifier.padding(16.dp)&#13;&#10;    )&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun NotificationCard(&#13;&#10;    notification: UserNotification,&#13;&#10;    onClick: () -&gt; Unit,&#13;&#10;    modifier: Modifier = Modifier&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .clickable(onClick = onClick),&#13;&#10;        shape = RoundedCornerShape(16.dp),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier.padding(16.dp)&#13;&#10;        ) {&#13;&#10;            Row(&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                // 通知タイプに応じたアイコン&#13;&#10;                Icon(&#13;&#10;                    imageVector = when (notification.type) {&#13;&#10;                        NotificationType.PROBLEM -&gt; Icons.Default.Warning&#13;&#10;                        NotificationType.CHAT -&gt; Icons.AutoMirrored.Filled.Message&#13;&#10;                        NotificationType.SYSTEM -&gt; Icons.Default.Info&#13;&#10;                    },&#13;&#10;                    contentDescription = null,&#13;&#10;                    tint = MaterialTheme.colorScheme.primary,&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.width(12.dp))&#13;&#10;&#13;&#10;                Column(modifier = Modifier.weight(1f)) {&#13;&#10;                    Text(&#13;&#10;                        text = notification.title,&#13;&#10;                        style = MaterialTheme.typography.titleMedium,&#13;&#10;                        fontWeight = FontWeight.Bold,&#13;&#10;                        maxLines = 1,&#13;&#10;                        overflow = TextOverflow.Ellipsis&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(4.dp))&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = notification.message,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        maxLines = 2,&#13;&#10;                        overflow = TextOverflow.Ellipsis&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm&quot;, Locale.getDefault())&#13;&#10;                            .format(notification.createdAt.toDate()),&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                if (!notification.isRead) {&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .size(8.dp)&#13;&#10;                            .background(&#13;&#10;                                color = MaterialTheme.colorScheme.primary,&#13;&#10;                                shape = RoundedCornerShape(4.dp)&#13;&#10;                            )&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/viewmodel/HelpMatchingViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/viewmodel/HelpMatchingViewModel.kt" />
              <option name="originalContent" value="package com.example.e_zuka.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.data.region.HelpMatchingRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HelpMatchingViewModel : ViewModel() {&#10;    private val repository = HelpMatchingRepository()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _successMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val successMessage: StateFlow&lt;String?&gt; = _successMessage.asStateFlow()&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage.asStateFlow()&#10;&#10;    private val _helpRequests = MutableStateFlow&lt;List&lt;HelpRequest&gt;&gt;(emptyList())&#10;    val helpRequests: StateFlow&lt;List&lt;HelpRequest&gt;&gt; = _helpRequests.asStateFlow()&#10;&#10;    // マッチング（困りごととスキルの検索）&#10;    private val _matchedHelpers = MutableStateFlow&lt;List&lt;HelperSkill&gt;&gt;(emptyList())&#10;    val matchedHelpers: StateFlow&lt;List&lt;HelperSkill&gt;&gt; = _matchedHelpers.asStateFlow()&#10;&#10;    fun postHelpRequest(request: HelpRequest) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.postHelpRequest(request)&#10;                if (result) {&#10;                    _successMessage.value = &quot;困りごとを投稿しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;投稿に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;投稿中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun registerSkill(skill: HelperSkill) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.registerSkill(skill)&#10;                if (result) {&#10;                    _successMessage.value = &quot;スキルを登録しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;スキル登録に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;スキル登録中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadHelpRequests() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val requests = repository.getHelpRequests()&#10;                _helpRequests.value = requests&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;困りごと一覧の取得に失敗しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun findMatchingHelpers(request: HelpRequest) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val helpers = repository.findMatchingHelpers(request)&#10;                _matchedHelpers.value = helpers&#10;                if (helpers.isEmpty()) {&#10;                    _errorMessage.value = &quot;該当する支援者が見つかりませんでした&quot;&#10;                } else {&#10;                    _successMessage.value = &quot;${helpers.size}件の支援者が見つかりました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;マッチング検索中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // 進捗管理（状態変更）&#10;    fun updateRequestStatus(requestId: String, status: String, matchedHelperId: String? = null) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.updateRequestStatus(requestId, status, matchedHelperId)&#10;                if (result) {&#10;                    _successMessage.value = &quot;依頼の進捗を「${status}」に更新しました&quot;&#10;                    // 状態更新後、一覧を再取得&#10;                    loadHelpRequests()&#10;                } else {&#10;                    _errorMessage.value = &quot;進捗の更新に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;進捗更新中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // 評価投稿&#10;    fun postEvaluation(evaluation: com.example.e_zuka.data.model.HelpEvaluation) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.postEvaluation(evaluation)&#10;                if (result) {&#10;                    _successMessage.value = &quot;評価を送信しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;評価の送信に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;評価送信中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearSuccessMessage() {&#10;        _successMessage.value = null&#10;    }&#10;&#10;    fun clearErrorMessage() {&#10;        _errorMessage.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.e_zuka.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.e_zuka.data.model.HelpRequest&#10;import com.example.e_zuka.data.model.HelperSkill&#10;import com.example.e_zuka.data.region.HelpMatchingRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HelpMatchingViewModel : ViewModel() {&#10;    private val repository = HelpMatchingRepository()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _successMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val successMessage: StateFlow&lt;String?&gt; = _successMessage.asStateFlow()&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage.asStateFlow()&#10;&#10;    private val _helpRequests = MutableStateFlow&lt;List&lt;HelpRequest&gt;&gt;(emptyList())&#10;    val helpRequests: StateFlow&lt;List&lt;HelpRequest&gt;&gt; = _helpRequests.asStateFlow()&#10;&#10;    // マッチング（困りごととスキルの検索）&#10;    private val _matchedHelpers = MutableStateFlow&lt;List&lt;HelperSkill&gt;&gt;(emptyList())&#10;    val matchedHelpers: StateFlow&lt;List&lt;HelperSkill&gt;&gt; = _matchedHelpers.asStateFlow()&#10;&#10;    // 評価一覧取得&#10;    private val _evaluations = MutableStateFlow&lt;List&lt;com.example.e_zuka.data.model.HelpEvaluation&gt;&gt;(emptyList())&#10;    val evaluations: StateFlow&lt;List&lt;com.example.e_zuka.data.model.HelpEvaluation&gt;&gt; = _evaluations.asStateFlow()&#10;&#10;    fun postHelpRequest(request: HelpRequest) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.postHelpRequest(request)&#10;                if (result) {&#10;                    _successMessage.value = &quot;困りごとを投稿しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;投稿に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;投稿中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun registerSkill(skill: HelperSkill) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.registerSkill(skill)&#10;                if (result) {&#10;                    _successMessage.value = &quot;スキルを登録しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;スキル登録に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;スキル登録中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadHelpRequests() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val requests = repository.getHelpRequests()&#10;                _helpRequests.value = requests&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;困りごと一覧の取得に失敗しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun findMatchingHelpers(request: HelpRequest) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val helpers = repository.findMatchingHelpers(request)&#10;                _matchedHelpers.value = helpers&#10;                if (helpers.isEmpty()) {&#10;                    _errorMessage.value = &quot;該当する支援者が見つかりませんでした&quot;&#10;                } else {&#10;                    _successMessage.value = &quot;${helpers.size}件の支援者が見つかりました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;マッチング検索中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // 進捗管理（状態変更）&#10;    fun updateRequestStatus(requestId: String, status: String, matchedHelperId: String? = null) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.updateRequestStatus(requestId, status, matchedHelperId)&#10;                if (result) {&#10;                    _successMessage.value = &quot;依頼の進捗を「${status}」に更新しました&quot;&#10;                    // 状態更新後、一覧を再取得&#10;                    loadHelpRequests()&#10;                } else {&#10;                    _errorMessage.value = &quot;進捗の更新に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;進捗更新中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // 評価投稿&#10;    fun postEvaluation(evaluation: com.example.e_zuka.data.model.HelpEvaluation) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val result = repository.postEvaluation(evaluation)&#10;                if (result) {&#10;                    _successMessage.value = &quot;評価を送信しました&quot;&#10;                } else {&#10;                    _errorMessage.value = &quot;評価の送信に失敗しました&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;評価送信中にエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadEvaluationsForUser(userId: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val evals = repository.getEvaluationsForUser(userId)&#10;                _evaluations.value = evals&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = &quot;評価一覧の取得に失敗しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearSuccessMessage() {&#10;        _successMessage.value = null&#10;    }&#10;&#10;    fun clearErrorMessage() {&#10;        _errorMessage.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/viewmodel/HelpRequestViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_zuka/viewmodel/HelpRequestViewModel.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>